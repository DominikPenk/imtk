{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ImTk Documentation","text":"<p>Welcome to the documentation for ImTk, a library for building Immediate Mode GUIs based on Tkinter.</p>"},{"location":"#modules-in-the-documentation","title":"Modules in the documentation","text":"<ul> <li>Functional: Documentation for the core functions of ImTk.</li> <li>Layout: Documentation for managing layouts with the <code>row</code> and <code>same_row</code> functions.</li> <li>Widgets: Documentation for custom widgets provided by ImTk.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>ImTk is an open-source project, and contributions are welcome! If you have ideas, bug reports, or want to contribute code, please check out our GitHub repository.</p> <p>Happy coding with ImTk!</p>"},{"location":"functional/","title":"Functional","text":"<p>In this module you will find functions to add elements to your immediate GUI. All methods return a ImWidgetState for internal reasons.  Also the state contains some internal information you should usually treat it as an indicator if the element is active, like this:</p> <pre><code>cur_val = \"Hello, World!\"\n\nif imtk.button(\"Button\"):\n    print(\"An 'active' button means it was clicked\")\n\nactive, cur_val = imtk.input_text(label=\"Text input\", text_=cur_val)\nif active:\n    print(\"An 'active' input implies that the value changed\")\n</code></pre> <p>As you can see some UI elements might return multiple values.  In these cases, the first one is always the ImWidgetState and the following are the (updated) versions of the input (e.g. the value of a text input)</p>"},{"location":"functional/#imtk.functional.button","title":"<code>button(text, **kwargs)</code>","text":"<p>A simple button widget.</p> <p>Example: <pre><code>if imtk.button(\"A Button\"):\n    print(\"Button was pressed\")\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text on the button</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <code>dict[str, Any]</code> <p>These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.button. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, text and command</p> <p>Returns:</p> Name Type Description <code>state</code> <code>ImWidgetState</code> <p>State of the widget. Can be used as a boolean to check if it was clicked.</p>"},{"location":"functional/#imtk.functional.checkbox","title":"<code>checkbox(label, value, **kwargs)</code>","text":"<p>A checkbox widget.</p> <p>Example: <pre><code>checked, current_value = imtk.checkbox(\"Enable Feature\", value=True)\nif checked:\n    print(\"Feature is enabled\")\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the checkbox.</p> required <code>value</code> <code>bool</code> <p>The initial state of the checkbox.</p> required <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Additional keyword arguments to customize the checkbox. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.checkbox. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, text, and command.</p> <p>Returns:</p> Type Description <code>ImWidgetState</code> <ul> <li>ImWidgetState: State of the widget. Can be used as a boolean to check if the checkbox state was modified.</li> </ul> <code>bool</code> <ul> <li>bool: The current state of the checkbox (checked or unchecked).</li> </ul>"},{"location":"functional/#imtk.functional.combo_box","title":"<code>combo_box(label, current_index, values, label_position='right', **kwargs)</code>","text":"<p>A combo box widget for selecting a value from a list of options.</p> <p>Example: <pre><code>changed, current_index = imtk.combo_box(label=\"Select Option\", current_index=selected_index, values=[\"Option 1\", \"Option 2\"])\nif changed:\n    print(\"The selected option changed to\", values[current_index])\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the combo box.</p> required <code>current_index</code> <code>int</code> <p>The initial index of the selected value in the combo box.</p> required <code>values</code> <code>Sequence[str]</code> <p>The list of options displayed in the combo box.</p> required <p>Other Parameters:</p> Name Type Description <code>label_position</code> <code>str</code> <p>The position of the label relative to the combo box. Possible values: 'left', 'right'. Defaults to 'right'.</p> <code>**kwargs</code> <p>Additional keyword arguments to customize the combo box. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.combo_box. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, label, variable, and command.</p> <p>Returns:</p> Name Type Description <code>state</code> <code>ImWidgetState</code> <p>State of the widget. Can be used as a boolean to check if the selection was modified.</p> <code>index</code> <code>int</code> <p>The current index of the selected value in the combo box.</p>"},{"location":"functional/#imtk.functional.horizontal_separator","title":"<code>horizontal_separator(identifier, width=None, relwidth=0.95, **kwargs)</code>","text":"<p>A horizontal separator widget.</p> <p>Example: <pre><code>imtk.horizontal_separator(\"Separator 1\", width=2, relwidth=0.8)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>A unique identifier for the widget.</p> required <code>width</code> <code>int | None</code> <p>The width of the separator line in pixels. Defaults to None.</p> <code>None</code> <code>relwidth</code> <code>float</code> <p>The relative width of the separator as a fraction of the parent's width. Defaults to 0.95.</p> <code>0.95</code> <p>Other Parameters:</p> Name Type Description <code>**kwargs</code> <p>Additional keyword arguments to customize the separator widget. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to ttk.Separator. See Tkinter TTK Reference.</p> Note <p>You should never manually set the following arguments: orient.</p> <p>Returns:</p> Name Type Description <code>ImWidgetState</code> <code>ImWidgetState</code> <p>State of the widget.  Since this widget cannot be active, you will probably ignore this return value.</p>"},{"location":"functional/#imtk.image","title":"<code>image(identifier, image, size=None, **kwargs)</code>","text":"<p>Create an Immediate Mode GUI widget for displaying an image.</p> <p>Example: <pre><code># Assuming 'my_image' is a PIL Image or another compatible image type\nimtk.image(identifier=\"image_widget_1\", image=my_image, size=(200, 150))\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>str</code> <p>A unique identifier for the widget.</p> required <code>image</code> <code>ImageLike</code> <p>The image to be displayed. Must be compatible with the backend.</p> required <code>size</code> <code>Tuple[int, int] | None</code> <p>The size of the displayed image. Defaults to None.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments for customizing the image widget.</p> <code>{}</code> <p>Returns:</p> Type Description <code>ImWidgetState</code> <p>base.ImWidgetState: The state of the widget. Since this widget cannot be active, you will probably ignore this return value.</p> Note <ul> <li>The ImageLike type represents an image object compatible with the backend (PIL Image or NumPy array).</li> <li>Additional keyword arguments are backend-specific and may include parameters for   image positioning, scaling, or other customizations.</li> </ul>"},{"location":"functional/#input-fields","title":"Input Fields","text":""},{"location":"functional/#imtk.functional.input_text","title":"<code>input_text(label, text_, label_position='right', **kwargs)</code>","text":"<p>A widget to input text</p> <p>Example: <pre><code>current_value = \"Some Text\"\n\nchanged, current_value = imtk.input_text(label=\"Text Input\", text_=Some text)\nif changed:\n    print(\"The text changed to\", current_value)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the text input field.</p> required <code>text_</code> <code>str</code> <p>The current text value displayed in the input field.</p> required <p>Other Parameters:</p> Name Type Description <code>label_position</code> <code>str</code> <p>The position of the label relative to the input field. Possible values: 'left', 'right'. Defaults to 'right'.</p> <code>**kwargs</code> <p>Additional keyword arguments to customize the text input field. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.input_text. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, text, and command.</p> <p>Returns:</p> Name Type Description <code>state</code> <code>ImWidgetState</code> <p>State of the widget. Can be used as a boolean to check if the text was modified.</p> <code>value</code> <code>str</code> <p>The current text value in the input field.</p>"},{"location":"functional/#imtk.functional.input_int","title":"<code>input_int(label, val, vmin=0, vmax=100, label_position='right', **kwargs)</code>","text":"<p>A widget for inputting integer values within a specified range.</p> <p>Example: <pre><code>changed, current_value = imtk.input_int(label=\"Set Value\", val=current_value, vmin=0, vmax=100)\nif changed:\n    print(\"The value changed to\", current_value)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the integer input field.</p> required <code>val</code> <code>int</code> <p>The initial integer value displayed in the input field.</p> required <p>Other Parameters:</p> Name Type Description <code>vmin</code> <code>int</code> <p>The minimum allowed value. Defaults to 0.</p> <code>vmax</code> <code>int</code> <p>The maximum allowed value. Defaults to 100.</p> <code>label_position</code> <code>str</code> <p>The position of the label relative to the input field. Possible values: 'left', 'right'. Defaults to 'right'.</p> <code>**kwargs</code> <p>Additional keyword arguments to customize the integer input field. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.input_int. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, text, and command.</p> <p>Returns:</p> Name Type Description <code>state</code> <code>ImWidgetState</code> <p>State of the widget. Can be used as a boolean to check if the value was modified.</p> <code>int</code> <code>int</code> <p>The current integer value in the input field.</p>"},{"location":"functional/#imtk.functional.input_float","title":"<code>input_float(label, val, vmin=0, vmax=100, label_position='right', format_='%.3f', increment=0.1, **kwargs)</code>","text":"<p>A widget for inputting floating-point values within a specified range.</p> <p>Example: <pre><code>changed, current_value = imtk.input_float(label=\"Set Value\", val=current_value, vmin=0, vmax=100, increment=0.1)\nif changed:\n    print(\"The value changed to\", current_value)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the floating-point input field.</p> required <code>val</code> <code>float</code> <p>The initial floating-point value displayed in the input field.</p> required <p>Other Parameters:</p> Name Type Description <code>vmin</code> <code>float</code> <p>The minimum allowed value. Defaults to 0.</p> <code>vmax</code> <code>float</code> <p>The maximum allowed value. Defaults to 100.</p> <code>label_position</code> <code>str</code> <p>The position of the label relative to the input field. Possible values: 'left', 'right'. Defaults to 'right'.</p> <code>format_</code> <code>str</code> <p>The format string used to display the floating-point value. Defaults to \"%.3f\".</p> <code>increment</code> <code>float</code> <p>The increment step for the input field. Defaults to 0.1.</p> <code>**kwargs</code> <p>Additional keyword arguments to customize the floating-point input field. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.input_float. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, text, and command.</p> <p>Returns:</p> Name Type Description <code>state</code> <code>ImWidgetState</code> <p>State of the widget. Can be used as a boolean to check if the value was modified.</p> <code>float</code> <code>float</code> <p>The current floating-point value in the input field.</p>"},{"location":"functional/#imtk.functional.progress_bar","title":"<code>progress_bar(label, value, min_=0.0, max_=1.0, label_position='right', show_progress=False, **kwargs)</code>","text":"<p>A progress bar widget for visualizing the progress of a task.</p> <p>Example: <pre><code>imtk.progress_bar(label=\"Loading\", value=0.75, min_=0.0, max_=1.0, show_progress=True)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the progress bar.</p> required <code>value</code> <code>float</code> <p>The current value of the progress bar within the specified range.</p> required <p>Other Parameters:</p> Name Type Description <code>min_</code> <code>float</code> <p>The minimum allowed value. Defaults to 0.0.</p> <code>max_</code> <code>float</code> <p>The maximum allowed value. Defaults to 1.0.</p> <code>label_position</code> <code>str</code> <p>The position of the label relative to the progress bar. Possible values: 'left', 'right'. Defaults to 'right'.</p> <code>show_progress</code> <code>bool</code> <p>Whether to display the current progress percentage next to the bar. Defaults to False.</p> <code>**kwargs</code> <p>Additional keyword arguments to customize the progress bar. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.progress_bar. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, value, mode, variable, and command.</p> <p>Returns:</p> Name Type Description <code>ImWidgetState</code> <code>ImWidgetState</code> <p>State of the progress bar. Since this widget cannot be active, you will probably ignore this return value.</p>"},{"location":"functional/#sliders","title":"Sliders","text":""},{"location":"functional/#imtk.functional.int_slider","title":"<code>int_slider(label, val, vmin=0, vmax=100, label_position='right', **kwargs)</code>","text":"<p>A slider widget for selecting integer values within a specified range.</p> <p>Example: <pre><code>changed, current_value = imtk.int_slider(label=\"Adjust Value\", val=current_value, vmin=0, vmax=100)\nif changed:\n    print(\"The value changed to\", current_value)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the integer slider.</p> required <code>val</code> <code>int</code> <p>The initial integer value displayed on the slider.</p> required <p>Other Parameters:</p> Name Type Description <code>vmin</code> <code>int</code> <p>The minimum allowed value. Defaults to 0.</p> <code>vmax</code> <code>int</code> <p>The maximum allowed value. Defaults to 100.</p> <code>label_position</code> <code>str</code> <p>The position of the label relative to the slider. Possible values: 'left', 'right'. Defaults to 'right'.</p> <code>**kwargs</code> <p>Additional keyword arguments to customize the integer slider. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.int_slider. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, label, from_, to, and command.</p> <p>Returns:</p> Name Type Description <code>state</code> <code>ImWidgetState</code> <p>State of the widget. Can be used as a boolean to check if the value was modified.</p> <code>value</code> <code>int</code> <p>The current integer value selected on the slider.</p>"},{"location":"functional/#imtk.functional.float_slider","title":"<code>float_slider(label, val, vmin=0.0, vmax=1.0, label_position='right', **kwargs)</code>","text":"<p>A slider widget for selecting floating-point values within a specified range.</p> <p>Example: <pre><code>changed, current_value = imtk.float_slider(label=\"Adjust Value\", val=current_value, vmin=0.0, vmax=1.0)\nif changed:\n    print(\"The value changed to\", current_value)\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the float slider.</p> required <code>val</code> <code>float</code> <p>The initial floating-point value displayed on the slider.</p> required <p>Other Parameters:</p> Name Type Description <code>vmin</code> <code>float</code> <p>The minimum allowed value. Defaults to 0.0.</p> <code>vmax</code> <code>float</code> <p>The maximum allowed value. Defaults to 1.0.</p> <code>label_position</code> <code>str</code> <p>The position of the label relative to the slider. Possible values: 'left', 'right'. Defaults to 'right'.</p> <code>**kwargs</code> <p>Additional keyword arguments to customize the float slider. These arguments are defined by the concrete imtk backend implementation. Usually, this includes at least all arguments available to tk.float_slider. See Tkinter Reference.</p> Note <p>You should never manually set the following arguments: parent, label, from_, to, and command.</p> <p>Returns:</p> Name Type Description <code>state</code> <code>ImWidgetState</code> <p>State of the widget. Can be used as a boolean to check if the value was modified.</p> <code>value</code> <code>float</code> <p>The current value selected on the slider.</p>"},{"location":"install/","title":"Install","text":"<p>We currently do not publish any version of this repository yet. Still, you can use pip to install imtk to your python environment:</p> <pre><code>pip install git+https://github.com/DominikPenk/imtk\n</code></pre> <p>You can also clone the repository and install from a local source: <pre><code>git clone https://github.com/DominikPenk/imtk.git\ncd imtk\npython setup.py sdist\n</code></pre></p>"},{"location":"layout/","title":"Layout","text":"<p>By default, subsequent UI elements are drawn in separate rows. In this module we implement functions to achieve different layouts.</p>"},{"location":"layout/#imtk.layout.row","title":"<code>row(context=None)</code>","text":"<p>Start a new row for placing widgets.</p> <p>This function is used to begin a new row, allowing for the placement of multiple widgets horizontally in the layout.</p> <p>Example: <pre><code>with imtk.row():\n    imtk.button(\"Button 1\")\n    imtk.button(\"Button 2\")\n    imtk.button(\"Button 3\")\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>Optional[ImFrame]</code> <p>The context to use. If not provided, the current context will be used.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>SameRowContext</code> <code>SameRowContext</code> <p>Context manager for managing the placement of widgets in the same row.</p>"},{"location":"layout/#imtk.layout.same_row","title":"<code>same_row(context=None)</code>","text":"<p>Ensure the next widget is placed in the same row as the previous one.</p> <p>Example: <pre><code>imtk.button(\"First Button\")\nimtk.same_row()\nimtk.button(\"Second Button\")\n</code></pre></p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>Optional[ImFrame]</code> <p>The active ImTk frame. If not provided, the current context will be used.</p> <code>None</code>"},{"location":"tutorial/","title":"Tutorial","text":"<p>TODO</p>"},{"location":"widgets/","title":"Widgets","text":"<p>We added some convenient widgets for tkinter that should work with all implemented backends.</p>"},{"location":"widgets/#plotting","title":"Plotting","text":""},{"location":"widgets/#imtk.Plot","title":"<code>Plot</code>","text":"<p>A wrapper for Matplotlib plots integrated with Tkinter.</p> <p>This class provides a convenient interface for creating Matplotlib plots that can be embedded within Tkinter applications.</p> <p>Parameters:</p> Name Type Description Default <code>height</code> <code>int</code> <p>The height of the plot in pixels. Defaults to 480.</p> <code>480</code> <code>width</code> <code>int</code> <p>The width of the plot in pixels. Defaults to 640.</p> <code>640</code> <code>dpi</code> <code>int</code> <p>Dots per inch for the plot. Defaults to 96.</p> <code>96</code> <p>Example: <pre><code>with Plot() as plot:\n    plt.plot([0, 1, 2, 3, 4], [0, 1, 4, 9, 16])\n    plot.create_widget(master=tk.Tk())\n</code></pre></p> Note <p>The plot can be used as a context manager, ensuring that the Matplotlib figure is the currently active figure during the block.</p> <p>Attributes:</p> Name Type Description <code>height</code> <code>int</code> <p>The height of the plot.</p> <code>width</code> <code>int</code> <p>The width of the plot.</p> <code>dpi</code> <code>int</code> <p>Dots per inch for the plot.</p> <code>figure</code> <code>Figure</code> <p>The Matplotlib figure.</p> <code>_tk_canvas</code> <code>FigureCanvasTkAgg</code> <p>The Tkinter canvas for embedding the plot.</p>"},{"location":"widgets/#imtk.Plot.stale","title":"<code>stale: bool</code>  <code>property</code> <code>writable</code>","text":"<p>Flag indicating if the Matplotlib figure is stale.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the figure is stale, False otherwise.</p>"},{"location":"widgets/#imtk.Plot.title","title":"<code>title: str</code>  <code>property</code> <code>writable</code>","text":"<p>Get the title of the Matplotlib figure.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The title of the figure.</p>"},{"location":"widgets/#imtk.Plot.set_draw_callback","title":"<code>set_draw_callback(callback)</code>","text":"<p>Set a callback function to be called on each draw.</p> <p>Parameters:</p> Name Type Description Default <code>callback</code> <code>Callable[[None], None]</code> <p>The callback function.</p> required"},{"location":"widgets/#imtk.plot","title":"<code>plot(label, plot, identifier=None)</code>","text":"<p>Create an Immediate Mode GUI widget for embedding a Matplotlib plot.</p> <p>Parameters:</p> Name Type Description Default <code>label</code> <code>str</code> <p>The label associated with the plot.</p> required <code>plot</code> <code>Plot</code> <p>The Plot instance containing the Matplotlib plot.</p> required <code>identifier</code> <code>str | None</code> <p>An optional identifier for the widget. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>ImWidgetState</code> <p>base.ImWidgetState: The state of the widget. Since a plot widget is never active you will probably ignore this value.</p> <p>Example: <pre><code># Create a Matplotlib plot\nmy_plot = Plot(figsize=(3, 2), dpi=100)\n# Create an Immediate Mode GUI widget for the Matplotlib plot\nmy_plot = imtk.plot(label=\"My Custom Plot\", plot=my_plot)\n\n...\n\nwith my_plot:\n    plt.plot([0, 1, 2, 3, 4], [0, 1, 4, 9, 16])\n</code></pre></p>"}]}